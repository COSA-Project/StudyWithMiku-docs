{"version":3,"file":"177-d3d1bf.js","mappings":"wNAkBc,SAAUA,IACpB,MAAM,OAAEC,IAAW,IAAAC,WAEnB,OAVE,SAA0BD,GAE5B,MAAME,EAAS,EAAQ,KAEvB,OAAOF,EAAOG,gBAAgB,QAAaD,GAMpCC,CAAgBH,GCdb,SAAUI,EAAV,GAAkE,IAAhDC,OAAO,MAAEC,IAAuC,EAE5E,MAAMC,GAAS,IAAAC,UAAQ,ICTb,SAAuBC,GACjC,MAAMC,EAAQD,EAAQE,OAAOC,MAAM,MACnC,IAAIC,EAAQ,GACZ,IAAK,MAAMC,KAAQJ,EAAO,CACtB,IAAKK,EAAMC,EAAKC,GAASH,EAAKF,MAAM,KACpCC,EAAMK,KAAK,CACPH,KAAAA,EACAC,IAAAA,EACAC,MAAAA,IAIR,OAAOJ,EDFIM,CAAab,IACrB,CAACA,IAEEc,GAAY,IAAAC,QAAO,MAEnBrB,EAASD,IAaf,OAXA,IAAAuB,YAAU,KACFF,EAAUG,SACV,IAAI,IAAJ,CAAY,CACRH,UAAWA,EAAUG,QACrBC,MAAO,2BACPX,MAAON,KACJP,EAAOyB,gBAGnB,CAAClB,KAEG,SAACmB,EAAS,CAACC,IAAKP,IAG3B,MAAMM,EAAY,EAAAE,OAAA,IAAH","sources":["webpack://TopWritePlugins.audio/./.topwrite/use-config.ts","webpack://TopWritePlugins.audio/./src/components/audio.tsx","webpack://TopWritePlugins.audio/./src/lib/parse-content.tsx"],"sourcesContent":["import { BaseConfig, Config, useBook } from 'topwrite';\r\nimport { Config as ConfigType } from './config';\r\n\r\ndeclare const PLUGIN_NAME: string;\r\n\r\ndeclare module 'topwrite' {\r\n    export interface HookContext {\r\n        getConfig(): BaseConfig<ConfigType>;\r\n    }\r\n}\r\n\r\nexport function getPluginConfig(config: Config): BaseConfig<ConfigType> {\r\n\r\n    const schema = require('../config.json');\r\n\r\n    return config.getPluginConfig(PLUGIN_NAME, schema);\r\n}\r\n\r\nexport default function useConfig() {\r\n    const { config } = useBook();\r\n\r\n    return getPluginConfig(config);\r\n};\r\n","import { GetComponentProps, styled } from 'topwrite';\r\nimport { useEffect, useMemo, useRef } from 'react';\r\nimport parseContent from '@/lib/parse-content';\r\nimport APlayer from 'aplayer';\r\nimport 'aplayer/dist/APlayer.min.css';\r\nimport useConfig from '@@/use-config';\r\n\r\nexport default function Audio({ props: { value } }: GetComponentProps<'x-block'>) {\r\n\r\n    const audios = useMemo(() => {\r\n        return parseContent(value);\r\n    }, [value]);\r\n\r\n    const container = useRef(null);\r\n\r\n    const config = useConfig();\r\n\r\n    useEffect(() => {\r\n        if (container.current) {\r\n            new APlayer({\r\n                container: container.current,\r\n                theme: 'var(--ttw-primary-color)',\r\n                audio: audios,\r\n                ...config.getValues()\r\n            });\r\n        }\r\n    }, [audios]);\r\n\r\n    return <Container ref={container} />;\r\n}\r\n\r\nconst Container = styled.div`\r\n  white-space: initial;\r\n  -webkit-user-modify: read-only;\r\n  margin: 0 !important;\r\n\r\n  * {\r\n    box-sizing: content-box !important;\r\n  }\r\n\r\n  .aplayer-info {\r\n    box-sizing: border-box !important;\r\n  }\r\n\r\n  &:not( :last-child) {\r\n    margin-bottom: 15px !important;\r\n  }\r\n\r\n  .aplayer-author, .aplayer-list-author {\r\n    display: none;\r\n  }\r\n\r\n  .aplayer-list ol {\r\n    padding: 0 !important;\r\n\r\n    li {\r\n      line-height: 32px !important;\r\n    }\r\n  }\r\n\r\n`;\r\n","export default function parseContent(content: string) {\r\n    const lines = content.trim().split('\\n');\r\n    let audio = [];\r\n    for (const line of lines) {\r\n        let [name, url, cover] = line.split('|');\r\n        audio.push({\r\n            name,\r\n            url,\r\n            cover\r\n        });\r\n    }\r\n\r\n    return audio;\r\n}\r\n"],"names":["useConfig","config","useBook","schema","getPluginConfig","Audio","props","value","audios","useMemo","content","lines","trim","split","audio","line","name","url","cover","push","parseContent","container","useRef","useEffect","current","theme","getValues","Container","ref","styled"],"sourceRoot":""}