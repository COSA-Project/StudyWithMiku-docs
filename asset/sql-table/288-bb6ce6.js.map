{"version":3,"file":"288-bb6ce6.js","mappings":"y8CAAA,IAAMA,EAAiB,SAASC,GAE5B,OADAA,EAAOA,EAAKC,QAAQ,YAAa,IAAIA,QAAQ,kBAAmB,OAEpE,EAEA,SAASC,EAAUC,GACf,OAAOC,mBAAmBD,GAAQF,QAAQ,UAAW,GACzD,CAEA,I,IAAMI,EAAc,CAChB,WACA,SACA,QACA,MACA,cACA,cACA,QACA,UACA,UACA,gBACA,WACFC,KAAK,KAAKC,MAAM,KAYlB,SAASC,EAAYR,GACjB,IAAMS,EAAe,CACjBC,KAAM,GACNC,KAAM,GACNC,QAAS,CAAC,EACVC,UAAU,GAOVC,GAJJd,EAAOA,EAAKC,QAAQ,kBAAkB,SAASc,GAC3C,OAAOC,mBAAmBD,EAC9B,KAEkBE,OAAOV,MAAM,OAC3BG,EAAOR,EAAUY,EAAOI,SAE5B,IAAIb,EAAYc,SAAST,EAAKU,eAA9B,CAIAX,EAAMC,KAAOA,EACb,IAEwBW,EAFpBV,EAAiB,GAAGW,EAAAC,EAENT,GAAM,IAAxB,IAAAQ,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,MAA0B,KAAjBC,EAAKN,EAAAO,MACV,GAAIvB,EAAYc,SAASQ,EAAMP,eAC3B,MAEJT,EAAKkB,KAAK3B,EAAUyB,G,CACvB,OAAAG,GAAAR,EAAAS,EAAAD,EAAA,SAAAR,EAAAU,GAAA,CAEDvB,EAAME,KAAOA,EAAKL,KAAK,KAGnBN,EAAKiC,MAAM,qBAAuBjC,EAAKiC,MAAM,qBAC7CxB,EAAMI,UAAW,GAErB,IAAIqB,EAAgBlC,EAAKiC,MAAM,wBAC3BC,IACAzB,EAAMG,QAAO,QAAWV,EAAUgC,EAAc,KAEpD,IAAIC,EAAgBnC,EAAKiC,MAAM,wBAI/B,OAHIE,IACA1B,EAAMG,QAAQwB,QAAUlC,EAAUiC,EAAc,KAE7C1B,C,CACX,CAiDc,SAAU4B,EAAaC,GAGjC,IAAIC,GAFJD,EAAMvC,EAAeuC,IAEH/B,MAAM,KAEpBiC,EAAkB,GAwCtB,OAtCAD,EAAQE,SAAQ,SAASC,GACrB,IAAIT,EAAQS,EAAOT,MAAM,+EACzB,GAAIA,EAAO,CACP,IAAIU,EAAYzC,EAAU+B,EAAM,IAC5BW,EAAOF,EAAOG,UAAUH,EAAOI,YAAY,KAAO,GAAG7B,OACrD8B,EAASL,EAAOG,UAAUH,EAAOM,QAAQ,MAAM/B,OAAOhB,QAAQ,OAAQ,IAAIA,QAAQ,YAAa,IAEnGuC,EAAOX,KArDnB,SAAqBnB,EAAcqC,EAAgBH,GAC/C,IAAMK,EAAwB,GAC1BC,EAAa,EACXC,EAAe,CACjBzC,KAAMA,EACNqC,OAAQ,GACRnC,QAAS,CAAC,GAOVuB,GAJJS,EAAOA,EAAK3C,QAAQ,kBAAkB,SAASc,GAC3C,OAAOC,mBAAmBD,EAC9B,KAEyBkB,MAAM,4BAC3BE,IACAgB,EAAMvC,QAAQwB,QAAUlC,EAAUiC,EAAc,KASpD,IAEsBiB,EAFsBC,EAAA9B,GAN5CwB,EAASA,EAAO9C,QAAQ,kCAAkC,SAASc,GAG/D,OAFAmC,IACAD,EAAYC,GAAcnC,EACnB,iBAAPuC,OAAwBJ,EAAU,KACtC,KAEmB3C,MAAM,oBAEH,IAAtB,IAAA8C,EAAA7B,MAAA4B,EAAAC,EAAA5B,KAAAC,MAAwB,KAAf6B,EAAIH,EAAAxB,MAILnB,EAAQD,EAHZ+C,EAAOA,EAAKtD,QAAQ,0BAA0B,SAASuD,EAAGC,GACtD,OAAOR,EAAYQ,EACvB,KAEIhD,GACA0C,EAAMJ,OAAOlB,KAAKpB,E,CAEzB,OAAAqB,GAAAuB,EAAAtB,EAAAD,EAAA,SAAAuB,EAAArB,GAAA,CACD,OAAOmB,CACX,CAiBwBO,CAAYf,EAAWI,EAAQH,G,CAEnD,IAGAL,EAAQE,SAAQ,SAASC,GACrB,IAAIT,EAAQS,EAAOT,MAAM,gEACzB,GAAIA,EACA,OAAQA,EAAM,IACV,IAAK,QACD,IAAK,IAAL0B,EAAA,EAAAC,EAAoBpB,EAAMmB,EAAAC,EAAAC,OAAAF,IAAE,CAAvB,IAAMR,EAAKS,EAAAD,GACRR,EAAMzC,OAASuB,EAAM,KACrBkB,EAAMvC,QAAQwB,QAAUlC,EAAU+B,EAAM,I,CAGhD,MACJ,IAAK,SACD,IAAK,IAAL6B,EAAA,EAAAC,EAAoBvB,EAAMsB,EAAAC,EAAAF,OAAAC,IAAE,CAAvB,IAAMX,EAAKY,EAAAD,GACZ,GAAIX,EAAMzC,OAASuB,EAAM,GAAI,KACO+B,EADPC,EAAA1C,EACL4B,EAAMJ,QAAM,IAAhC,IAAAkB,EAAAzC,MAAAwC,EAAAC,EAAAxC,KAAAC,MAAkC,KAAvBjB,EAAKuD,EAAApC,MACRnB,EAAMC,OAASuB,EAAM,KACrBxB,EAAMG,QAAQwB,QAAUlC,EAAU+B,EAAM,I,CAE/C,OAAAH,GAAAmC,EAAAlC,EAAAD,EAAA,SAAAmC,EAAAjC,GAAA,C,GAMzB,IAEOQ,CACX,CCxKc,SAAU0B,EAAQC,GAAmD,IAAvCvC,EAAKuC,EAAdC,MAASxC,MAElCY,GAAS6B,EAAAA,EAAAA,UAAQ,WACnB,OAAOhC,EAAaT,EACxB,GAAG,CAACA,IAEJ,OAAO0C,EAAAA,EAAAA,KAACC,EAAS,CAAAC,SACZhC,EAAOiC,KAAI,SAAAtB,GACJ,OAAOuB,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAH,SAAA,EACZE,EAAAA,EAAAA,MAAA,MAAAF,SAAA,CAAKrB,EAAMzC,KAAMyC,EAAMvC,QAAQwB,QAAU,IAAHkB,OAAOH,EAAMvC,QAAQwB,SAAY,SACvEsC,EAAAA,EAAAA,MAAA,SAAAF,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,UACAE,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAAE,SAAA,QACAF,EAAAA,EAAAA,KAAA,MAAAE,SAAA,QACAF,EAAAA,EAAAA,KAAA,MAAAE,SAAA,SACAF,EAAAA,EAAAA,KAAA,MAAAE,SAAA,aAGJF,EAAAA,EAAAA,KAAA,SAAAE,SACCrB,EAAMJ,OAAO0B,KAAI,SAAAhE,GACd,OAAOiE,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACHE,EAAAA,EAAAA,MAAA,MAAAF,SAAA,CACK/D,EAAMI,UAAWyD,EAAAA,EAAAA,KAACM,EAAQ,CAAAJ,SAAA,MAAgB,KAC1C/D,EAAMC,SAEX4D,EAAAA,EAAAA,KAAA,MAAAE,SAAK/D,EAAME,QACX2D,EAAAA,EAAAA,KAAA,MAAAE,SAAK/D,EAAMG,QAAO,WAClB0D,EAAAA,EAAAA,KAAA,MAAAE,SAAK/D,EAAMG,QAAQwB,YAPP3B,EAAMC,KAS1B,WAtBcyC,EAAMzC,KA0BhC,KAGZ,CAEA,IAAMkE,EAAWC,EAAAA,OAAAA,KAAWC,IAAAA,EAAAC,IAAA,yBAItBR,EAAYM,EAAAA,OAAAA,IAAUG,IAAAA,EAAAD,IAAA,iF","sources":["webpack://TopWritePlugins.sql-table/./src/utils/parse-content.ts","webpack://TopWritePlugins.sql-table/./src/components/sql-table.tsx"],"sourcesContent":["const removeComments = function(data: string) {\r\n    data = data.replace(/\\/\\*(.*)/g, '').replace(/([ \\t]*\\n){3,}/g, '\\n\\n');\r\n    return data;\r\n};\r\n\r\nfunction normalize(string: string) {\r\n    return decodeURIComponent(string).replace(/['`\"]/ig, '');\r\n}\r\n\r\nconst constraints = [\r\n    'NOT NULL',\r\n    'UNIQUE',\r\n    'INDEX',\r\n    'KEY',\r\n    'PRIMARY KEY',\r\n    'FOREIGN KEY',\r\n    'CHECK',\r\n    'DEFAULT',\r\n    'COMMENT',\r\n    'CHARACTER SET',\r\n    'COLLATE'\r\n].join(' ').split(' ');\r\n\r\ninterface Field {\r\n    name: string;\r\n    type: string;\r\n    options: {\r\n        default?: string\r\n        comment?: string\r\n    };\r\n    required: boolean;\r\n}\r\n\r\nfunction createField(data: string) {\r\n    const field: Field = {\r\n        name: '',\r\n        type: '',\r\n        options: {},\r\n        required: false\r\n    };\r\n\r\n    data = data.replace(/(['\"])(.*?)\\1/g, function(all) {\r\n        return encodeURIComponent(all);\r\n    });\r\n\r\n    let tokens = data.trim().split(/\\s+/);\r\n    let name = normalize(tokens.shift()!);\r\n\r\n    if (constraints.includes(name.toUpperCase())) {\r\n        return;\r\n    }\r\n\r\n    field.name = name;\r\n    let type: string[] = [];\r\n\r\n    for (let token of tokens) {\r\n        if (constraints.includes(token.toUpperCase())) {\r\n            break;\r\n        }\r\n        type.push(normalize(token));\r\n    }\r\n\r\n    field.type = type.join(' ');\r\n\r\n\r\n    if (data.match(/.*NOT\\s+NULL.*/i) && !data.match(/AUTO_INCREMENT/i)) {\r\n        field.required = true;\r\n    }\r\n    let default_match = data.match(/.*DEFAULT\\s+(\\S+).*/i);\r\n    if (default_match) {\r\n        field.options.default = normalize(default_match[1]);\r\n    }\r\n    let comment_match = data.match(/.*COMMENT\\s+(\\S+).*/i);\r\n    if (comment_match) {\r\n        field.options.comment = normalize(comment_match[1]);\r\n    }\r\n    return field;\r\n}\r\n\r\ninterface Table {\r\n    name: string;\r\n    fields: Field[];\r\n    options: {\r\n        comment?: string\r\n    };\r\n}\r\n\r\nfunction createTable(name: string, fields: string, info: string) {\r\n    const placeholder: string[] = [];\r\n    let placeIndex = 0;\r\n    const table: Table = {\r\n        name: name,\r\n        fields: [],\r\n        options: {}\r\n    };\r\n\r\n    info = info.replace(/(['\"])(.*?)\\1/g, function(all) {\r\n        return encodeURIComponent(all);\r\n    });\r\n\r\n    let comment_match = info.match(/.*COMMENT\\s*=\\s*(\\S+).*/i);\r\n    if (comment_match) {\r\n        table.options.comment = normalize(comment_match[1]);\r\n    }\r\n\r\n    fields = fields.replace(/(enum|set|index\\s.*?)\\(.*?\\)/ig, function(all) {\r\n        placeIndex++;\r\n        placeholder[placeIndex] = all;\r\n        return `__PLACEHOLDER_${placeIndex}__`;\r\n    });\r\n\r\n    let lines = fields.split(/,[$|\"|`|'|\\s+]/i);\r\n\r\n    for (let line of lines) {\r\n        line = line.replace(/__PLACEHOLDER_(\\d+)__/g, function(_, index) {\r\n            return placeholder[index];\r\n        });\r\n        let field = createField(line);\r\n        if (field) {\r\n            table.fields.push(field);\r\n        }\r\n    }\r\n    return table;\r\n}\r\n\r\n\r\nexport default function parseContent(sql: string) {\r\n    sql = removeComments(sql);\r\n\r\n    let schemas = sql.split(';');\r\n\r\n    let tables: Table[] = [];\r\n\r\n    schemas.forEach(function(schema) {\r\n        let match = schema.match(/.*CREATE\\s+(TEMPORARY)?[\\s+]?TABLE\\s+(IF\\s+NOT\\s+EXISTS)?[\\s+]?([^\\s(]+).*/i);\r\n        if (match) {\r\n            let tableName = normalize(match[3]);\r\n            let info = schema.substring(schema.lastIndexOf(')') + 1).trim();\r\n            let fields = schema.substring(schema.indexOf('(')).trim().replace(/^\\(/g, '').replace(/\\).*?;?$/g, '');\r\n\r\n            tables.push(createTable(tableName, fields, info));\r\n        }\r\n    });\r\n\r\n    //兼容Oracle注释\r\n    schemas.forEach(function(schema) {\r\n        let match = schema.match(/comment\\s+on\\s+(column|table)\\s+((\\S+)\\.)?(\\S+)\\s+is\\s+(.+)/i);\r\n        if (match) {\r\n            switch (match[1]) {\r\n                case 'table':\r\n                    for (const table of tables) {\r\n                        if (table.name === match[4]) {\r\n                            table.options.comment = normalize(match[5]);\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'column':\r\n                    for (const table of tables) {\r\n                        if (table.name === match[3]) {\r\n                            for (const field of table.fields) {\r\n                                if (field.name === match[4]) {\r\n                                    field.options.comment = normalize(match[5]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    });\r\n\r\n    return tables;\r\n}\r\n","import { GetComponentProps, styled } from 'topwrite';\r\nimport { useMemo, Fragment } from 'react';\r\nimport parseContent from '@/utils/parse-content';\r\n\r\nexport default function SqlTable({ props: { value } }: GetComponentProps<'x-block'>) {\r\n\r\n    const tables = useMemo(() => {\r\n        return parseContent(value);\r\n    }, [value]);\r\n\r\n    return <Container>\r\n        {tables.map(table => {\r\n                return <Fragment key={table.name}>\r\n                    <h2>{table.name}{table.options.comment ? `:${table.options.comment}` : null}</h2>\r\n                    <table>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>字段</th>\r\n                            <th>类型</th>\r\n                            <th>默认值</th>\r\n                            <th>注释</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {table.fields.map(field => {\r\n                            return <tr key={field.name}>\r\n                                <td>\r\n                                    {field.required ? <Required>*</Required> : null}\r\n                                    {field.name}\r\n                                </td>\r\n                                <td>{field.type}</td>\r\n                                <td>{field.options.default}</td>\r\n                                <td>{field.options.comment}</td>\r\n                            </tr>;\r\n                        })}\r\n                        </tbody>\r\n                    </table>\r\n                </Fragment>;\r\n            }\r\n        )}\r\n    </Container>;\r\n}\r\n\r\nconst Required = styled.span`\r\n  color: red;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  margin-bottom: 14px;\r\n\r\n  &:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n`;\r\n"],"names":["removeComments","data","replace","normalize","string","decodeURIComponent","constraints","join","split","createField","field","name","type","options","required","tokens","all","encodeURIComponent","trim","shift","includes","toUpperCase","_step","_iterator","_createForOfIteratorHelper","s","n","done","token","value","push","err","e","f","match","default_match","comment_match","comment","parseContent","sql","schemas","tables","forEach","schema","tableName","info","substring","lastIndexOf","fields","indexOf","placeholder","placeIndex","table","_step2","_iterator2","concat","line","_","index","createTable","_i","_tables","length","_i2","_tables2","_step3","_iterator3","SqlTable","_ref","props","useMemo","_jsx","Container","children","map","_jsxs","Fragment","Required","styled","_templateObject","_taggedTemplateLiteral","_templateObject2"],"sourceRoot":""}